package festivalaplikacija.klijent.ki.glavnaforma;

import festivalaplikacija.klijent.ki.forma.drzava.DodajDrzavuForma;
import festivalaplikacija.klijent.ki.forma.drzava.IzmeniDrzavuForma;
import festivalaplikacija.klijent.ki.forma.drzava.PrikaziDrzavuForma;
import festivalaplikacija.klijent.ki.forma.izvodjac.DodajIzvodjacaForma;
import festivalaplikacija.klijent.ki.forma.izvodjac.IzmeniIzvodjacaForma;
import festivalaplikacija.klijent.ki.forma.izvodjac.PrikaziIzvodjacaForma;
import festivalaplikacija.klijent.ki.forma.login.kontroler.LoginFormaKontroler;
import festivalaplikacija.klijent.ki.forma.mesto.DodajMestoForma;
import festivalaplikacija.klijent.ki.forma.mesto.IzmeniMestoForma;
import festivalaplikacija.klijent.ki.forma.mesto.PrikaziMestoForma;
import festivalaplikacija.klijent.ki.forma.program.ProgramForma;
import festivalaplikacija.klijent.ki.glavnaforma.kontroler.GlavnaFormaKontroler;
import javax.swing.JOptionPane;

/**
 *
 * @author Dušan Kalejski dramski pedagog
 */
public class GlavnaForma extends javax.swing.JFrame {

    /**
     * Creates new form GlavnaForma
     */
    public GlavnaForma() {
        initComponents();
        GlavnaFormaKontroler.pripremiFormu(this, menuIzvodjac, menuDrzava, menuMesto);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        menuBarFestival = new javax.swing.JMenuBar();
        menuDrzava = new javax.swing.JMenu();
        menuItemDodajDrzavu = new javax.swing.JMenuItem();
        menuItemPrikaziDrzave = new javax.swing.JMenuItem();
        menuItemIzmeni = new javax.swing.JMenuItem();
        menuMesto = new javax.swing.JMenu();
        menuItemDodajMesto = new javax.swing.JMenuItem();
        menuItemPrikaziMesta = new javax.swing.JMenuItem();
        MenuItemIzmeniMesto = new javax.swing.JMenuItem();
        menuIzvodjac = new javax.swing.JMenu();
        MenuItemDodajIzvodjaca = new javax.swing.JMenuItem();
        MenuItemPrikaziIzvodjace = new javax.swing.JMenuItem();
        MenuItemIzmeniIzvodjaca = new javax.swing.JMenuItem();
        menuProgram = new javax.swing.JMenu();
        menuItemPrikaziProgram = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aplikacija za festival");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        menuBarFestival.setBorder(null);
        menuBarFestival.setToolTipText("");
        menuBarFestival.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        menuDrzava.setText("Drzava");
        menuDrzava.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        menuItemDodajDrzavu.setText("Dodaj novu drzavu");
        menuItemDodajDrzavu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDodajDrzavuActionPerformed(evt);
            }
        });
        menuDrzava.add(menuItemDodajDrzavu);

        menuItemPrikaziDrzave.setText("Prikazi sve drzave");
        menuItemPrikaziDrzave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPrikaziDrzaveActionPerformed(evt);
            }
        });
        menuDrzava.add(menuItemPrikaziDrzave);

        menuItemIzmeni.setText("Izmeni");
        menuItemIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemIzmeniActionPerformed(evt);
            }
        });
        menuDrzava.add(menuItemIzmeni);

        menuBarFestival.add(menuDrzava);

        menuMesto.setBorder(null);
        menuMesto.setText("Mesto");
        menuMesto.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        menuItemDodajMesto.setText("Dodaj novo mesto");
        menuItemDodajMesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDodajMestoActionPerformed(evt);
            }
        });
        menuMesto.add(menuItemDodajMesto);

        menuItemPrikaziMesta.setText("Prikazi sva mesta");
        menuItemPrikaziMesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPrikaziMestaActionPerformed(evt);
            }
        });
        menuMesto.add(menuItemPrikaziMesta);

        MenuItemIzmeniMesto.setText("Izmeni");
        MenuItemIzmeniMesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemIzmeniMestoActionPerformed(evt);
            }
        });
        menuMesto.add(MenuItemIzmeniMesto);

        menuBarFestival.add(menuMesto);

        menuIzvodjac.setText("Izvodjac");
        menuIzvodjac.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        MenuItemDodajIzvodjaca.setText("Dodaj Izvodjaca");
        MenuItemDodajIzvodjaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDodajIzvodjacaActionPerformed(evt);
            }
        });
        menuIzvodjac.add(MenuItemDodajIzvodjaca);

        MenuItemPrikaziIzvodjace.setText("Prikazi sve izvodjace");
        MenuItemPrikaziIzvodjace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPrikaziIzvodjaceActionPerformed(evt);
            }
        });
        menuIzvodjac.add(MenuItemPrikaziIzvodjace);

        MenuItemIzmeniIzvodjaca.setText("Izmeni");
        MenuItemIzmeniIzvodjaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemIzmeniIzvodjacaActionPerformed(evt);
            }
        });
        menuIzvodjac.add(MenuItemIzmeniIzvodjaca);

        menuBarFestival.add(menuIzvodjac);

        menuProgram.setText("Program");
        menuProgram.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        menuItemPrikaziProgram.setText("Prikazi");
        menuItemPrikaziProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPrikaziProgramActionPerformed(evt);
            }
        });
        menuProgram.add(menuItemPrikaziProgram);

        menuBarFestival.add(menuProgram);

        setJMenuBar(menuBarFestival);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemDodajDrzavuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDodajDrzavuActionPerformed
        new DodajDrzavuForma(this, true).setVisible(true);
    }//GEN-LAST:event_menuItemDodajDrzavuActionPerformed

    private void menuItemPrikaziDrzaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPrikaziDrzaveActionPerformed
        try {
            new PrikaziDrzavuForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_menuItemPrikaziDrzaveActionPerformed

    private void menuItemIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemIzmeniActionPerformed
        try {
            new IzmeniDrzavuForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_menuItemIzmeniActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void menuItemDodajMestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDodajMestoActionPerformed
        try {
            new DodajMestoForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_menuItemDodajMestoActionPerformed

    private void menuItemPrikaziMestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPrikaziMestaActionPerformed
        try {
            new PrikaziMestoForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_menuItemPrikaziMestaActionPerformed

    private void MenuItemIzmeniMestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemIzmeniMestoActionPerformed
        try {
            new IzmeniMestoForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_MenuItemIzmeniMestoActionPerformed

    private void MenuItemDodajIzvodjacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDodajIzvodjacaActionPerformed
        try {
            new DodajIzvodjacaForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_MenuItemDodajIzvodjacaActionPerformed

    private void MenuItemPrikaziIzvodjaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPrikaziIzvodjaceActionPerformed
        try {
            new PrikaziIzvodjacaForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_MenuItemPrikaziIzvodjaceActionPerformed

    private void MenuItemIzmeniIzvodjacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemIzmeniIzvodjacaActionPerformed
        try {
            new IzmeniIzvodjacaForma(this, true).setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_MenuItemIzmeniIzvodjacaActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed


    }//GEN-LAST:event_formWindowClosed

    private void menuItemPrikaziProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPrikaziProgramActionPerformed
        try {
            ProgramForma forma = new ProgramForma(this, true);
            forma.setLocationRelativeTo(this);
            forma.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Konekcija sa serverom je prekinuta. Vaša sesija će biti zatvorena", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_menuItemPrikaziProgramActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        LoginFormaKontroler.logout();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuItemDodajIzvodjaca;
    private javax.swing.JMenuItem MenuItemIzmeniIzvodjaca;
    private javax.swing.JMenuItem MenuItemIzmeniMesto;
    private javax.swing.JMenuItem MenuItemPrikaziIzvodjace;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar menuBarFestival;
    private javax.swing.JMenu menuDrzava;
    private javax.swing.JMenuItem menuItemDodajDrzavu;
    private javax.swing.JMenuItem menuItemDodajMesto;
    private javax.swing.JMenuItem menuItemIzmeni;
    private javax.swing.JMenuItem menuItemPrikaziDrzave;
    private javax.swing.JMenuItem menuItemPrikaziMesta;
    private javax.swing.JMenuItem menuItemPrikaziProgram;
    private javax.swing.JMenu menuIzvodjac;
    private javax.swing.JMenu menuMesto;
    private javax.swing.JMenu menuProgram;
    // End of variables declaration//GEN-END:variables
}
